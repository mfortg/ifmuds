# -*- coding: utf-8 -*-
"""testinfraestructurasmuds.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bPgUg_Wp-6wKDi9F9DGkv_fPKx2YMIgA
"""

import requests
data = requests.get(url= 'https://randomuser.me/api/?results=100')
data = data.json()['results']

print(data)

genders: list[str] = []
ages: list[int] = []
countries: list[str] = []
offsets_raw: list[str] = []
offsets: list[float] = []

for user in data:
 genders.append(user['gender'])
 ages.append(user['dob']['age'])
 countries.append(user['location']['country'])
 offsets_raw.append(user['location']['timezone']['offset'])

#print(genders)
#print(ages)
#print(countries)
print(offsets_raw)
#los offsets están en formato str, hace falta convertirlos a valores numéricos
def convert_offset(offset):
  #el resto de la función se rompe con offset 0:00 ya que no tiene signo, asi que le añadiremos un signo +
  if offset == '0:00':
    offset = '+0:00'

  #todos los offset empiezan con un signo, si es - lo asignaremos como -1 y sino lo asignaremos como 1
  if offset[0] == '-':
    sign = -1
  else:
    sign = 1

  #tomamos el offset (ignorando el simbolo con el [1:]) y lo partimos por los : convirtiendolos en int (la funcion map aplica int a todos los iterables)
  hours, minutes = map(int, offset[1:].split(':'))

  #calculamos las horas de offset en valor numérico (IMPORTANTE: Multiplicadas por el valor acorde al signo para diferenciar entre negativo y posiivo)
  offset_hours = sign * (hours + (minutes / 60))
  return offset_hours

convert_offset('0:00')

for offset in offsets_raw:
  offsets.append(convert_offset(offset))

print(offsets)

import matplotlib.pyplot as plt
offset_counts = {}

#Vamos a contar las ocurrencias en intervalos de 3 horas
for offset in offsets:

    # Redondeamos al intervalo de 3 horas
    rounded_offset = round(offset / 3) * 3

    #Contamos las veces que ocurre un offset en cada intervalo, y lo inicializamos como 1 si es la primera vez
    if rounded_offset in offset_counts:
        offset_counts[rounded_offset] += 1
    else:
        offset_counts[rounded_offset] = 1

#ordenamos offset_counts para que este ordenado según sus keys (esto es para ordenar el gráfico fácilmente)
offset_counts = dict(sorted(offset_counts.items()))

#Creamos el gráfico
#Creamos las etiquetas usando las keys en el diccionario offset_counts
labels = [f"{key} horas" for key in offset_counts.keys()]
#Asignamos los valores de cada sección del gráfico (con el valor correspondiente a cada key del diccionario)
sizes = list(offset_counts.values())
#Generamos tantos colores (el Paired hace que sean colores distintso con una funcion de plt) como labels tenemos
colors = plt.cm.Paired(range(len(labels)))  # Generate a color map

#Tamaño del gráfico
plt.figure(figsize=(8, 6))
#Tipo de grafico(pie), los valores de cada sección (sizes), las etiquetas (labels), los colores (colors), el formato de decimales (autopct % = especificación de formato, 1.1 = minimo 1 número y un decimal, f = float), y startangle para que empiece bien alineado
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
#Título
plt.title("Distribución de gente según su offset horario en intervalos de 3 horas")
#Ratio (igual para que sea circular)
plt.axis('equal')


plt.savefig('/home/marc/Desktop/MUDS/image.png', format='png', dpi=300)
plt.show()

